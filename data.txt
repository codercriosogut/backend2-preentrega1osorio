//Rutas
.gitignore
package-lock.json
package.json
src/app.js
src/config/bcryptUtils.js
src/config/connectMongodb.js
src/config/jwtUtils.js
src/config/middlewareAuth.js
src/config/passport.js
src/config/schemaUser.js
src/routes/sessions.js
src/routes/views.js
src/views/login.hbs
src/views/profile.hbs
src/views/register.hbs
src/views/layouts/main.hbs

//Nombre del archivo: package.json
{
  "name": "v1",
  "version": "1.0.0",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "start": "node --watch src/app.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "bcrypt": "^5.1.1",
    "body-parser": "^1.20.3",
    "connect-mongo": "^5.1.0",
    "express": "^4.21.0",
    "express-handlebars": "^8.0.1",
    "express-session": "^1.18.0",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.6.2",
    "passport": "^0.7.0",
    "passport-local": "^1.0.0"
  }
}

//Nombre del archivo: src/app.js
import express from 'express';
import session from 'express-session';
import { engine } from 'express-handlebars';
import mongoose from './config/connectMongodb.js';
import MongoStore from 'connect-mongo';
import passport from 'passport';
import sessionsRouter from './routes/sessions.js';
import viewsRouter from './routes/views.js';
import initializePassport from './config/passport.js';
import { generateToken, authToken } from './config/jwtUtils.js';


const app = express()
const port = 8080

app.engine('hbs', engine({
    extname: '.hbs',
    defaultLayout: 'main',
}));

app.set('view engine', 'hbs');
app.set('views', './src/views');

app.use(express.json())
app.use(express.urlencoded({ extended: true }))

app.use(session({
    secret: 'secretkey',
    resave: false,
    saveUninitialized: true,
    store: MongoStore.create({
        mongoUrl: 'mongodb+srv://cri2024:cri2024@cluster0.mswsapd.mongodb.net/clase7_entrega1?retryWrites=true&w=majority&appName=Cluster0',
    })
}))


initializePassport();
app.use(passport.initialize());
app.use(passport.session());

app.use('/api/sessions', sessionsRouter);
app.use('/', viewsRouter);

app.get("/current", authToken, (req, res) => {
    res.send({ status: "success", payload: req.user });
})


app.listen(port, () => console.log(`Server running on port ${port}`))




//Nombre del archivo: src/config/bcryptUtils.js
import bcrypt from 'bcrypt';

// hashear la contraseña
export const createHash = password => bcrypt.hashSync(password, bcrypt.genSaltSync(10));


// validad la contraseña
export const isValidPassword = (user, password) => bcrypt.compareSync(password, user.password)


//Nombre del archivo: src/config/connectMongodb.js
import mongoose from 'mongoose';

mongoose.connect('mongodb+srv://cri2024:cri2024@cluster0.mswsapd.mongodb.net/clase7_entrega1?retryWrites=true&w=majority&appName=Cluster0');

const db = mongoose.connection;

db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', () => {
    console.log('Connected to MongoDB');
});

export default db;

//Nombre del archivo: src/config/jwtUtils.js
import jwt from 'jsonwebtoken';

const PRIVATE_KEY = 'secretkey'

const generateToken = (user) => {
    const token = jwt.sign({ user }, PRIVATE_KEY, { expiresIn: '24h' })
    return token
}

const authToken = (req, res, next) => {
    const authHeader = req.headers.authorization
    if (!authHeader) return res.status(401).send({ error: 'No autenticado' })
    const token = authHeader.split(" ")[1]
    jwt.verify(token, PRIVATE_KEY, (error, credentials) => {
        if (error) return res.status(403).send({ error: 'No autorizado' })
        req.user = credentials.user
        next()
    })
}

export { generateToken, authToken }

//Nombre del archivo: src/config/middlewareAuth.js
export const isAuthenticated = (req, res, next) => {
    if (req.session.user) {
        return next();
    } else {
        res.redirect('/login');
    }
};

export const isNotAuthenticated = (req, res, next) => {
    if (!req.session.user) {
        return next();
    } else {
        res.redirect('/profile');
    }
};


//Nombre del archivo: src/config/passport.js
import passport from "passport";
import local from "passport-local";
import userService from './schemaUser.js';
import { createHash, isValidPassword } from './bcryptUtils.js';


const localStrategy = local.Strategy;

const initializePassport = () => {
    passport.use('register', new localStrategy({
        passReqToCallback: true,
        usernameField: 'email'
    }, async (req, username, password, done) => {
        const { first_name, last_name, email, age, role } = req.body;
        try {
            let user = await userService.findOne({ email: username });
            if (user) {
                console.log("el usuario existe")
                return done(null, false);
            }
            const newUser = {
                first_name,
                last_name,
                email,
                age,
                role,
                password: createHash(password)
            }
            let result = await userService.create(newUser);
            return done(null, result);
        } catch (error) {
            return done("error al obtener el usuario" + error);
        }
    }
    ))
    //fin

    passport.serializeUser((user, done) => {
        done(null, user._id);
    })
    passport.deserializeUser(async (id, done) => {
        let user = await userService.findById(id);
        done(null, user);
    })

    passport.use('login', new localStrategy({ usernameField: 'email' }, async (username, password, done) => {
        try {
            const user = await userService.findOne({ email: username });
            if (!user) {
                console.log("el usuario no existe")
                return done(null, false);
            }
            if (!isValidPassword(user, password)) return done(null, false);
            return done(null, user);

        } catch (error) {
            return done(error);
        }
    }))

}



export default initializePassport



//Nombre del archivo: src/config/schemaUser.js
import mongoose from "mongoose";

const userCollection = "Users";

const userSchema = new mongoose.Schema({
    first_name: String,
    last_name: String,
    email: { type: String, unique: true },
    age: Number,
    role: String,
    password: String,
});

const firstCollection = mongoose.model(userCollection, userSchema);

export default firstCollection



//Nombre del archivo: src/routes/sessions.js
import { Router } from 'express';
import passport from 'passport';
import { generateToken } from '../config/jwtUtils.js';

const router = Router();

router.post('/register', passport.authenticate('register', { failureRedirect: '/failregister' }), async (req, res) => {
    const user = req.user;
    const access_token = generateToken(user); // Generar el token aquí
    res.status(201).send({ status: "success", message: "Usuario registrado", access_token });
});



router.get('/failregister', async (req, res) => {
    console.log('estrategia fallida');
    res.send({ error: "Failed" });
});

router.post('/login', passport.authenticate('login', { failureRedirect: '/faillogin' }), async (req, res) => {
    if (!req.user) return res.status(400).send({ status: "error", error: "credenciales invalidas" });

    req.session.user = {
        first_name: req.user.first_name,
        last_name: req.user.last_name,
        role: req.user.role,
        email: req.user.email,
        age: req.user.age
    }
    // Generar el token aquí
    const access_token = generateToken(req.user);
    res.send({ status: "success", payload: req.user, access_token });
});


router.get('/faillogin', (req, res) => {
    res.send("Login fallido");
});


router.post('/logout', (req, res) => {
    req.session.destroy((err) => {
        if (err) return res.status(500).send('Error al cerrar sesión');
        res.redirect('/login');
    });
});

export default router;



//Nombre del archivo: src/routes/views.js
import { Router } from 'express';
import { isAuthenticated, isNotAuthenticated } from '../config/middlewareAuth.js';

const router = Router();

router.get('/login', isNotAuthenticated, (req, res) => {
    res.render('login');
});

router.get('/register', isNotAuthenticated, (req, res) => {
    res.render('register');
});

router.get('/profile', isAuthenticated, (req, res) => {
    res.render('profile', { user: req.session.user });
});

export default router;


//Nombre del archivo: src/views/login.hbs
<h2>Iniciar Sesión - Correo+Password</h2>
<form action="/api/sessions/login" method="POST">
    <label for="email">Email:</label>
    <input type="email" name="email" required>
    <label for="password">Contraseña:</label>
    <input type="password" name="password" required>
    <button type="submit">Ingresar</button>
</form>
<a href="/register">Registrarse</a>

//Nombre del archivo: src/views/profile.hbs
<h2>Perfil del Usuario - Registro</h2>
<p>Nombre: {{user.first_name}}</p>
<p>Apellido: {{user.last_name}}</p>
<p>Email: {{user.email}}</p>
<p>Edad: {{user.age}}</p>
<p>Rol: {{user.role}}</p>
<form action="/api/sessions/logout" method="POST">
    <button type="submit">Cerrar Sesión</button>
</form>

//Nombre del archivo: src/views/register.hbs
<h2>Registro - Administrador</h2>
<form action="/api/sessions/register" method="POST">
    <label for="first_name">Nombre:</label>
    <input type="text" name="first_name" required>
    <label for="last_name">Apellido:</label>
    <input type="text" name="last_name" required>
    <label for="email">Email:</label>
    <input type="email" name="email" required>
    <label for="age">Edad:</label>
    <input type="number" name="age" required>
    <label for="role">Rol:</label>
    <select name="role" required>
        <option value="admin">Administrador</option>
        <option value="user">Usuario</option>
    </select>
    <label for="password">Contraseña:</label>
    <input type="password" name="password" required>
    <button type="submit">Registrarse</button>
</form>
<a href="/login">Iniciar sesión</a>

//Nombre del archivo: src/views/layouts/main.hbs
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{title}}</title>
</head>

<body>
    {{{body}}}
</body>

</html>



Este proyecto parece ser una aplicación web que utiliza Node.js, Express, Passport para la autenticación, JWT para la generación de tokens, Handlebars como motor de plantillas para las vistas, y MongoDB como base de datos. El enfoque principal es la autenticación de usuarios con la posibilidad de registro, inicio de sesión y perfil, incluyendo roles como administrador y usuario.

Funcionalidades principales:
Autenticación y manejo de sesiones:

Passport.js se utiliza con estrategias local para registrar y autenticar usuarios usando correo electrónico y contraseña. La contraseña se hashea usando bcrypt antes de ser almacenada en la base de datos.
Se generan tokens JWT después de un registro exitoso o autenticación. Estos tokens se verifican para acceder a rutas protegidas.
Sesiones son gestionadas con express-session, almacenadas en una base de datos MongoDB usando connect-mongo.
Rutas de inicio de sesión y registro están implementadas con autenticación basada en JWT y sesiones.
Rutas protegidas:

El middleware isAuthenticated protege la ruta del perfil para asegurarse de que el usuario esté autenticado antes de acceder.
isNotAuthenticated redirige a los usuarios autenticados para que no accedan a rutas como el inicio de sesión o el registro si ya han iniciado sesión.
Vistas:

Utiliza Handlebars para las vistas de las páginas como login, register y profile. Estas vistas se muestran de manera simple con campos de formulario y opciones de navegación entre las páginas.
Gestión de contraseñas:

Las contraseñas se almacenan de forma segura utilizando bcrypt. Se proporciona una función para comparar la contraseña ingresada por el usuario con la almacenada.
Base de datos MongoDB:

El esquema de usuarios está bien estructurado con campos como first_name, last_name, email, age, role y password.
El sistema usa Mongoose para conectarse a una base de datos MongoDB alojada en la nube.

